Testing and Mocking in R
========================================================
author: Richèl Bilderbeek
autosize: true

`richel@richelbilderbeek.nl`
[https://github.com/richelbilderbeek/testing_and_mocking_in_r](https://github.com/richelbilderbeek/testing_and_mocking_in_r)

![](CC-BY-NC-SA.png)

Goal
========================================================

 * Understand the use of mocking in tests

***

![](friendship_is_magic_below.png)

Problem
========================================================

 * You want to test all code
 * You want the tests to pass fast

```{r}
library(testthat)
```

***

![](hadley_wickham_50.jpg)

> Hadley Wickham

Our two friends
========================================================

![](twilight_sparkle_10.png)

![](Madhava-Leibniz_series.png)

***

![](rainbow_dash_6.png)

pi ≈ 22 / 7

Context: run_sim
========================================================

```{r}
#' Run a simulation
#' @param parameters one set of parameters
#' @return a complex result
#' @export
run_sim <- function(parameters) {
  # Check input

  # Complex calculation here
  message("... 1 second passes ...")
}
```

```{r echo=FALSE}
run_sim <- function(parameters) {
  if (!is.numeric(parameters)) { stop("invalid parameters")}
  print("... 1 second passes ...")
  parameters
}
```

run_sim checks its input
========================================================

```{r}
test_that("check input", {
  expect_error(
    run_sim("nonsense"), "invalid parameters"
  )
  expect_error(
    run_sim(NA), "invalid parameters"
  )
  # Etcetera
})
```

Check run_sim scenario 1
========================================================

```{r echo=FALSE}
create_test_parameters_1 <- function() { 3.14 }
```

```{r}
test_that("scenario 1", {
  parameters <- create_test_parameters_1()
  results <- run_sim(parameters)
  expect_equal(results, 3.14)
})
```

Check run_sim scenario 2
========================================================

```{r echo=FALSE}
create_test_parameters_2 <- function() { 2.72 }
```

```{r}
test_that("scenario 2", {
  parameters <- create_test_parameters_2()
  results <- run_sim(parameters)
  expect_equal(results, 2.72)
})
```

Excellent
========================================================

 * Function checks its input
 * Function returns the correct values


***

![](twilight_sparkle_25.png)

A convenience function is added
========================================================

```{r}
#' Run one or more simulations
#' @param parameters_list list of
#'   one or more parameters
#' @return a list of results
#' @export
run_sims <- function(parameters_list) {
  # Call 'run_sim' once per parameter_set
}
```

```{r echo=FALSE}
run_sims <- function(parameters_list) {
  resultses <- list()
  for (i in seq_along(parameters_list)) {
    resultses[[i]] <- run_sim(parameters_list[[i]])
  }
  resultses
}
```

run_sims checks its input
========================================================

```{r}
test_that("test input", {
  expect_error(
    run_sims("nonsense"),
    "invalid parameters"
  )
  expect_error(
    run_sims(NA),
    "invalid parameters"
  )
})
```

Check run_sims scenario 1
========================================================

```{r}
test_that("scenario 1", {
  parameters_list <- list(create_test_parameters_1())
  results_list <- run_sims(parameters_list)
  expect_true(is.list(results_list))
  expect_equal(
    length(results_list),
    length(parameters_list)
  )
  expect_equal(results_list[[1]], 3.14)
})
```

Check run_sims scenario 2
========================================================

```{r}
test_that("scenario 2", {
  parameters_list <- list(create_test_parameters_2())
  results_list <- run_sims(parameters_list)
  expect_true(is.list(results_list))
  expect_equal(
    length(results_list),
    length(parameters_list)
  )
  expect_equal(results_list[[1]], 2.72)
})
```

Check run_sims scenario 1 and 2
========================================================

```{r}
test_that("scenario 1 and 2", {
  parameters_list <- list(
    create_test_parameters_1(),
    create_test_parameters_2()
  )
  results_list <- run_sims(parameters_list)
  # ...
  expect_equal(results_list[[1]], 3.14)
  expect_equal(results_list[[2]], 2.72)
})
```

Why was that naive and idealistic?
========================================================

We have already tested `run_sim` in multiple scenarios.

No need to check these outcomes again!

We do need to test the *structure* of the output.

***

![](rainbow_dash_10.png)

Check run_sims scenario 1
========================================================

```{r}
test_that("scenario 1", {
  parameters_list <- list(create_test_parameters_1())
  results_list <- run_sims(parameters_list)
  expect_true(is.list(results_list))
  expect_equal(
    length(results_list),
    length(parameters_list)
  )
})
```

Check run_sims scenario 2
========================================================

```{r}
test_that("scenario 2", {
  parameters_list <- list(create_test_parameters_2())
  results_list <- run_sims(parameters_list)
  expect_true(is.list(results_list))
  expect_equal(
    length(results_list),
    length(parameters_list)
  )
})
```

Then remove this test :-)

Check run_sims scenario 1 and 2
========================================================

```{r}
test_that("scenario 1 and 2", {
  parameters_list <- list(
    create_test_parameters_1(),
    create_test_parameters_2()
  )
  results_list <- run_sims(parameters_list)
  expect_true(is.list(results_list))
  expect_equal(
    length(results_list),
    length(parameters_list)
  )
})
```

Why was this not perfect?
========================================================

> We do need to test the *structure* of the output.

We don't care about the real results.

We do care about tests finishing fast!

***

![](rainbow_dash_10.png)

Non-mock solution
========================================================

```{r}
run_sim_no_mocking <- function(
  parameters,
  fake = FALSE
) {

  # Check input, also the 'fake' argument

  if (fake) {
    # Do fake calculation
  } else {
    # Do real calculation
  }
}
```

Non-mock solution
========================================================

Pro:

 * Also works!

Con:

 * Functions become twice as complex
 * Less clear that you are mocking

***

![](twilight_sparkle_25.png)

Mocking to the rescue
========================================================

Mock function ≈ a quick-and-dirty function

 * Same error messages
 * Same type of output
 * Return values in valid range

```{r}
library(mockr)
```

***

![](kirill_mueller.jpg)

> Kirill Müller

The plan
========================================================

We test `run_sims`,
but instead of using `run_sim`,
we use `mock_run_sim`.

We swap out a complex function call by a simpler one.

***

![](rainbow_dash_10.png)

Mock function
========================================================

```{r}
#' Mock the run of a simulation
#' @param parameters one set of parameters
#' @return a complex result
#' @export
mock_run_sim <- function(parameters) {
  # Check input

  # Mock calculation here
  message("I am fast!")
}
```

```{r echo=FALSE}
mock_run_sim <- function(parameters) {
  if (!is.numeric(parameters)) { stop("invalid parameters")}
  print("I am fast!")
  parameters
}
```

mock_run_sim checks its input
========================================================

```{r}
test_that("test input", {
  expect_error(
    mock_run_sim("nonsense"),
    "invalid parameters"
  )
  expect_error(
    mock_run_sim(NA),
    "invalid parameters"
  )
})
```

Mock usage
========================================================

```
with_mock(
  [real function name] = [mock function name],
  [your thing]
)
```

 * Use `=` in the first line, as this is a **function argument** assignment
 * Don't forget the comma after the function argument assignment
 * Use `<-` in the second line, as this is a **variable** assignment

Mock run_sims scenario 1
========================================================

```{r}
test_that("scenario 1", {
  parameters_list <- list(create_test_parameters_1())
  with_mock(
    run_sim = mock_run_sim,
    results_list <- run_sims(parameters_list)
  )
  expect_true(is.list(results_list))
  # Other tests
})
```

Mock run_sims scenario 1 and 2
========================================================

```{r}
test_that("scenario 1 and 2", {
  parameters_list <- list(
    create_test_parameters_1(),
    create_test_parameters_2()
  )
  with_mock(
    run_sim = mock_run_sim,
    results_list <- run_sims(parameters_list)
  )
  expect_true(is.list(results_list))
  # Other tests
})
```

Drawbacks of mockr
========================================================

Unable to do cross-package mocking

```
library(DAISIE)
with_mock(
  DAISIE_ML4 = function(...) 42,
  results <- DAISIE_ML(
    # ...
  )
)
```

> Error: Function DAISIE_ML4 not found in environment testthat.

```{r eval=FALSE,echo=FALSE}
library(DAISIE)
data(Galapagos_datalist)
with_mock(
  DAISIE_ML4 = function(...) 42,
  results <- DAISIE::DAISIE_ML(
    datalist = Galapagos_datalist,
    initparsopt = c(2.5,2.7,20,0.009,1.01),
    ddmodel = 11,
    idparsopt = 1:5,
    parsfix = NULL,
    idparsfix = NULL
  )
)
```

Conclusion
========================================================

 A mock function must

  * behave
  * be tested

like its real counterpart,
except for the calculation it fakes.

***

![](rainbow_dash_10.png)

Conclusion
========================================================

 * A package developer needs mocking when tests take too long
 * If he/she didn't, contact him/her to add those mock functions

***

![](twilight_sparkle_25.png)

Questions?
========================================================

`richel@richelbilderbeek.nl`
[https://github.com/richelbilderbeek/testing_and_mocking_in_r](https://github.com/richelbilderbeek/testing_and_mocking_in_r)

![](CC-BY-NC-SA.png)

Join the `informalr` R team: [https://github.com/informalr](https://github.com/informalr)
